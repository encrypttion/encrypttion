---
import Layout from '~/layouts/PageLayout.astro';
import Header from '~/components/widgets/Header.astro';
import Hero2 from '~/components/widgets/Hero2.astro';
import ContactUs from '~/components/widgets/Contact.astro';
import { headerData } from '~/navigation';

const metadata = {
  title: 'AI-POWERED CYBERSECURITY',
};

const phases = [
  {
    id: 'requirements-analysis',
    name: 'Requirements Analysis',
    color: '#FF6F61', // Vibrant coral
    icon: 'fas fa-search',
    components: ['Comprehensive Compliance Management'],
  },
  {
    id: 'design',
    name: 'Design',
    color: '#6B5B95', // Vibrant purple
    icon: 'fas fa-pencil-alt',
    components: ['Predictive Threat Modeling'],
  },
  {
    id: 'implementation',
    name: 'Implementation (Coding)',
    color: '#88B04B', // Vibrant green
    icon: 'fas fa-code',
    components: ['AI-Driven Code Intelligence', 'IDE Plugins and Extensions'],
  },
  {
    id: 'testing',
    name: 'Testing',
    color: '#F7CAC9', // Light pink
    icon: 'fas fa-cogs',
    components: ['Advanced API Security', 'Seamless CI/CD Pipeline Integration'],
  },
  {
    id: 'deployment',
    name: 'Deployment',
    color: '#92A8D1', // Vibrant blue
    icon: 'fas fa-upload',
    components: ['Integrated SDLC Security', 'Natural Language Query Interface'],
  },
  {
    id: 'maintenance',
    name: 'Maintenance',
    color: '#F7786B', // Vibrant red
    icon: 'fas fa-wrench',
    components: ['Predictive Threat Modeling', 'Advanced API Security', 'Natural Language Query Interface'],
  },
];
---

<Layout metadata={metadata}>
  <Fragment slot="header">
    <Header {...headerData} isSticky />
  </Fragment>

  <!-- Two-Column Layout ******************* -->
  <div class="container mx-auto mt-10 px-4">
    <div class="flex flex-col lg:flex-row items-stretch">
      <!-- Left Column: Diagram -->
      <div class="lg:w-3/5 w-full lg:pr-8 flex flex-col justify-center">
        <h2 class="text-3xl font-bold mb-4 text-center">
          Sekura AI-POWERED SSDLC Platform
        </h2>
        <p class="text-lg sm:text-xl leading-relaxed mt-4 mb-8 max-w-2xl mx-auto">
          Imagine a world where your applications are protected by an AI that not only understands current 
          threats but anticipates future ones. A world where your security measures are as dynamic and intelligent as the threats they guard against.
        </p>
        <!-- SVG Diagram will be injected here by the script -->
        <div id="diagram-container" class="flex-grow flex items-center justify-center" style="width: 1200px; height: 600px;"></div>

        <!-- Phase Details -->
        {phases.map((phase) => (
          <div
            class="phase absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 border-2 border-gray-300 rounded-lg z-10 w-4/5 max-w-2xl shadow-2xl hidden"
            id={phase.id}
          >
            <h2 class="text-3xl font-bold mb-4 text-gray-800">{phase.name}</h2>
            <div class="space-y-3">
              {phase.components.map((component) => (
                <div class="component bg-gray-50 p-3 rounded-md border border-gray-200">
                  <p class="text-lg text-gray-700">{component}</p>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>

      <!-- Right Column: LinkedIn and Waitlist -->
      <div class="lg:w-2/5 w-full lg:pl-8 mt-8 lg:mt-0 flex flex-col justify-center">
        <Hero2
          tagline="Join the Cybersecurity Revolution!"
          actions={[
            {
              variant: 'primary',
              text: 'Follow us on LinkedIn',
              href: 'https://www.linkedin.com/company/sekuraai',
              icon: 'tabler:brand-linkedin',
            },
          ]}
        >
          <Fragment slot="subtitle">
            <p class="text-xl font-semibold mt-6 text-center">
              Ready to Elevate Your Security?
            </p>
          </Fragment>

          <Fragment slot="content" class="mt-8">
            <ContactUs
              id="waitlistForm"
              title="Join Waitlist"
              action="https://shiny-tooth-96ca.tikka-nagi.workers.dev/"
              inputs={[
                {
                  type: 'email',
                  name: 'email',
                  label: 'Email',
                },
              ]}
              class="max-w-md mx-auto"
            />
          </Fragment>
        </Hero2>
      </div>
    </div>
  </div>

  <!-- Include Font Awesome -->
  <Fragment slot="head">
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      integrity="sha512-p6YbUXrN3dP5e0YpP/1+hZBjVxkBl16eIPhh+KMVesZJzO4fg+bVZDeHUMa6L9BkgZPWsoP0ZBfY0PHwz6+xog=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </Fragment>

  <!-- JavaScript for the Diagram -->
  <script is:inline define:vars={{ phases }}>
    document.addEventListener('DOMContentLoaded', function () {
      const svgNS = 'http://www.w3.org/2000/svg';

      // Create SVG element
      const svg = document.createElementNS(svgNS, 'svg');
      svg.setAttribute('width', '100%');
      svg.setAttribute('height', '100%');
      svg.setAttribute('viewBox', '-600 -600 1200 1200');
      svg.setAttribute('class', 'diagram');
      //svg.setAttribute('viewBox', '-400 -400 800 800');
      //svg.setAttribute('class', 'diagram w-full h-full mx-auto');

      // Append SVG to diagram container
      const container = document.getElementById('diagram-container');
      container.appendChild(svg);

      const radius = 500;

      function drawDiagram() {
        svg.innerHTML = ''; // Clear existing content

        phases.forEach((phase, index) => {
          // Calculate start and end angles
          const totalPhases = phases.length;
          const startAngle = (index / totalPhases) * 2 * Math.PI - Math.PI / 2; // Starting from top
          const endAngle = ((index + 1) / totalPhases) * 2 * Math.PI - Math.PI / 2;

          // Convert to Cartesian coordinates
          const x1 = radius * Math.cos(startAngle);
          const y1 = radius * Math.sin(startAngle);
          const x2 = radius * Math.cos(endAngle);
          const y2 = radius * Math.sin(endAngle);

          // Determine if the arc is greater than 180 degrees
          const largeArcFlag = endAngle - startAngle <= Math.PI ? '0' : '1';

          // Create path data
          const d = [
            `M 0 0`, // Move to center
            `L ${x1} ${y1}`, // Line to start point
            `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`, // Arc to end point
            `Z`, // Close path
          ].join(' ');

          // Create path element
          const path = document.createElementNS(svgNS, 'path');
          path.setAttribute('d', d);
          path.setAttribute('fill', phase.color);
          path.setAttribute('stroke', '#333'); // Darker stroke for contrast
          path.setAttribute('stroke-width', '1');
          path.setAttribute('id', `${phase.id}-sector`);
          path.setAttribute('class', 'diagram-path');
          path.style.cssText = 'cursor: pointer; transition: transform 0.2s;';

          svg.appendChild(path);

          // Add HTML labels using foreignObject
          const textAngle = (startAngle + endAngle) / 2;
          const textRadius = radius * 0.6;

          const tx = textRadius * Math.cos(textAngle);
          const ty = textRadius * Math.sin(textAngle);

          const foreignObject = document.createElementNS(svgNS, 'foreignObject');
          foreignObject.setAttribute('x', tx - 50);
          foreignObject.setAttribute('y', ty - 10);
          foreignObject.setAttribute('width', 100);
          foreignObject.setAttribute('height', 20);
          foreignObject.setAttribute(
            'transform',
            `rotate(${(textAngle * 180) / Math.PI}, ${tx}, ${ty})`
          );

          const div = document.createElement('div');
          div.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
          div.setAttribute(
            'style',
            'display: flex; align-items: center; justify-content: center; font-size: 18px; font-weight: bold; text-align: center; pointer-events: none;'
          );

          div.innerHTML = `<i class="${phase.icon}" style="margin-right: 5px;"></i>${phase.name}`;

          foreignObject.appendChild(div);
          svg.appendChild(foreignObject);

          // Event listeners for interactivity
          path.addEventListener('click', function (event) {
            event.stopPropagation();
            // Hide all phase details
            document.querySelectorAll('.phase').forEach(function (el) {
              el.classList.add('hidden');
            });
            // Show current phase details
            document.getElementById(phase.id).classList.remove('hidden');
          });

          path.addEventListener('mouseover', function() {
            this.style.transform = 'scale(1.05)';
            this.style.fillOpacity = '0.9';
            this.style.stroke = '#000';
          });

          path.addEventListener('mouseout', function() {
            this.style.transform = 'scale(1)';
            this.style.fillOpacity = '1';
            this.style.stroke = '#333';
          });
        });
      }

      // Initial draw
      drawDiagram();

      // Redraw on window resize
      window.addEventListener('resize', drawDiagram);

      // Hide phase details when clicking outside
      document.addEventListener('click', function (event) {
        if (!event.target.closest('path')) {
          // Hide all phases
          document.querySelectorAll('.phase').forEach(function (el) {
            el.classList.add('hidden');
          });
        }
      });
    });
  </script>
</Layout>

